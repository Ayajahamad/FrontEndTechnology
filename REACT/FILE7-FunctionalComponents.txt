FUNCTIONAL COMPONENTS

1) Definition:
    -> Functional components are Javascript functions that return 35X(UI Elements).
    -> Regular Javascript functions. The functions will return the JSX
    -> The functions will return the JSX

2) Syntax:
    -> They are writting as regular Javascript funcions, often using arrow function syntax.

3) Stateless:
    -> Functional components are stateless by default, meaning they don't have their own internal state. They rely on props passed from parent components.

    Note: A stateless component, known as a functional component, is a fundamental concept in React that represents a UI element without any internal state management.

4) State Management:
    -> State Management in React applications that enable you to modularize and that will encapsulate the updates
    Therefore, you can maintain and debug your codebase.
    -> Proir to React 16.8, functional component couldn't manage state.
    â†’ With Introduction of Hooks, they can now manage state using the 'useState' hook.

5) Lifecycle:
    -> Functional component don't have Lifecycle method like class components. Instead, they can usse Hooks like useEffect to replicate lifecycle behavior.
    -> Instead, they can use hooks like 'useEffect' to replicate lifecycle behaviour.

6) Performance:
    -> Functional Components are generally considered more lightweight and easier to optmize, as they don't involved the overhead of class component instance.

7) Readability:
    -> Functional components can be more concise and easier to read, espicially for simpler UI render.

8) Code Organization:
    -> Functional component promote functional programming concept and modular code organization.